name: 'Run locust'
description: 'Run locust command with specifications'
inputs:
  locustfile:
    description: "Which locust test file to run"
    required: true
  users:
    description: "How many users"
    required: true
  spawn-rate:
    description: "How many users to hatch at a time"
    required: true
  run-time:
    description: "How long to run for"
    required: false
    default: '60s'
outputs:
  json-cleaning:
    description: "Whether the JSON is in a valid format or not now"
    value: ${{ steps.json-cleaner.outputs.json-cleaned }}

runs:
  using: 'composite'
  steps:
    # Run locust test and output results
    - name: Run locust test
      id: locust-runner
      shell: bash
      run: |
        source .venv/bin/activate
        CURR_TIME=$(date +%Y-%m-%d_%Hh-%Mm-%Ss)
        LOG_DIR="./logfiles"
        HTML_DIR="./htmlfiles"
        CSV_DIR="./csvfiles/$CURR_TIME"
        JSON_DIR="./jsonfiles/$CURR_TIME"

        mkdir -p $LOG_DIR $HTML_DIR $CSV_DIR $JSON_DIR



        locust \
          -f ${{ inputs.locustfile }} \
          --users ${{ inputs.users }} \
          --spawn-rate ${{ inputs.spawn-rate }} \
          --run-time ${{ inputs.run-time }} \
          --headless \
          --logfile $LOG_DIR/$(echo $CURR_TIME)_mylog.log --loglevel INFO \
          --html $HTML_DIR/$(echo $CURR_TIME)_myhtml.html \
          --csv $CSV_DIR/$(echo $CURR_TIME) --csv-full-history \
          --json \
          --exit-code-on-error 1 \
          --only-summary | awk '/\[/{flag=1} flag; /\]/{flag=0; print}' > $JSON_DIR/$(echo $CURR_TIME).json
        
        echo "JSON_DIR=$JSON_DIR" >> $GITHUB_OUTPUTS
        echo "CURR_TIME=$CURR_TIME" >> $GITHUB_OUTPUTS
        
        unset CURR_TIME LOG_DIR HTML_DIR CSV_DIR JSON_DIR

    # Clean JSON Data
    - name: Clean locust output JSON data
      id: json-cleaner
      shell: bash
      run: |
        source .venv/bin/activate
        BLUE="\033[34m"
        RESET="\033[0m"
        JSON_DIR="${{ steps.locust-runner.outputs.JSON_DIR }}"
        CURR_TIME="${{ steps.locust-runner.outputs.CURR_TIME }}"
        
        if ! jq '.' $JSON_DIR/$(echo $CURR_TIME).json 2>/dev/null; then
          echo -e "${BLUE}Invalid JSON detected!${RESET}"
          sed -i '$d' $JSON_DIR/$(echo $CURR_TIME).json
          if ! jq '.' $JSON_DIR/$(echo $CURR_TIME).json 2>/dev/null; then
            echo -e "${BLUE}JSON still invalid!${RESET}"
            echo "json-cleaned='false'" >> $GITHUB_OUTPUT
            exit 1
          else
            echo -e "${BLUE}JSON is valid.${RESET}"
            echo "json-cleaned='true'" >> $GITHUB_OUTPUT
          fi
        else
          echo -e "${BLUE}JSON is valid.${RESET}"
          echo "json-cleaned='true'" >> $GITHUB_OUTPUT
        fi
        
        unset BLUE RESET JSON_DIR

      continue-on-error: true