name: Job Artifacts and Outputs Test
run-name: ${{ github.actor }} is testing out GitHub Actions with artifacts 🚀
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths: # if activity in this folder or file, permitted. paths-ignore is the opposite
      - '.github/workflows/job-artifacts.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    outputs: # add identifiers by which you can access the output value
      script-file: ${{ steps.publish.outputs.script-file }}
      png-file: ${{ steps.publish.outputs.png-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip3 install --upgrade pip setuptools wheel
          pip3 install -r requirements.txt

    # TODO: Need to add some flags that will generate csv files, html files, and log files. These will be uploaded as artifacts.
      - name: Run locust test
        run: |
          CURR_TIME=$(date +%Y-%m-%d_%Hh-%Mm-%Ss)
          LOG_DIR="./logfiles"
          HTML_DIR="./htmlfiles"
          CSV_DIR="./csvfiles/$CURR_TIME"
          JSON_DIR="./jsonfiles/$CURR_TIME"
          
          mkdir -p $LOG_DIR
          mkdir -p $HTML_DIR
          mkdir -p $CSV_DIR
          mkdir -p $JSON_DIR
          
          echo "JSON_PATH=./jsonfiles/$CURR_TIME" >> $GITHUB_ENV
          echo "CURR_TIME=$CURR_TIME" >> $GITHUB_ENV
          
          locust \
            -f locustfiles/test.py \
            --users 25 \
            --spawn-rate 5 \
            --run-time 5s \
            --headless \
            --logfile $LOG_DIR/$(echo $CURR_TIME)_mylog.log --loglevel INFO \
            --html $HTML_DIR/$(echo $CURR_TIME)_myhtml.html \
            --csv $CSV_DIR/$(echo $CURR_TIME) --csv-full-history \
            --json \
            --exit-code-on-error 1 \
            --only-summary | awk '/\[/{flag=1} flag; /\]/{flag=0; print}' > $JSON_DIR/$(echo $CURR_TIME).json
          
          unset CURR_TIME LOG_DIR HTML_DIR CSV_DIR

      # List files
      - name: Check if new files have been produced
        run: |
          echo "🌲 This is the root directory:"
          ls
          echo "📁 These are the logfiles:"
          ls ./logfiles
          echo "📁 These are the htmlfiles:"
          ls ./htmlfiles
          echo "📁 These are the csvfiles:"
          ls ./csvfiles
          echo "📁 These are the jsonfiles:"
          ls ./jsonfiles

      # Clean JSON Data
      - name: Clean JSON data
        run: |
          BLUE="\033[34m"
          RESET="\033[0m"
          
          if ! jq '.' $JSON_PATH/$(echo $CURR_TIME).json 2>/dev/null; then
            echo -e "${BLUE}Invalid JSON detected!${RESET}"
            sed -i '$d' $JSON_PATH/$(echo $CURR_TIME).json
            if ! jq '.' $JSON_PATH/$(echo $CURR_TIME).json 2>/dev/null; then
              echo -e "${BLUE}JSON still invalid!${RESET}"
              exit 1
            else
              echo -e "${BLUE}JSON is valid.${RESET}"
            fi
          else
            echo -e "${BLUE}JSON is valid.${RESET}"
          fi
          
          unset BLUE RESET
        continue-on-error: true

    # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: locust-output-files
          path: |
            ./logfiles/
            ./htmlfiles/
            ./csvfiles/
            ./jsonfiles/

      - name: Publish filenames
        id: publish
        run: |
          find locustfiles/*.py -type f -execdir echo 'script-file {}' >> $GITHUB_OUTPUT ';'
          find images/*.png -type f -execdir echo 'png-file {}' >> $GITHUB_OUTPUT ';'
          

  # TODO: Look at job outputs video and play around with $GITHUB_OUTPUT
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: locust-output-files

      - name: Output filename
        run: |
          echo "${{ needs.test.outputs.script-file }}"
          echo "${{ needs.test.outputs.png-file }}"
